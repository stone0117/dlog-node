{"version":3,"file":"index.js","mappings":"YACA,IAAIA,EAAsB,GCD1BA,EAAoBC,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,GACd,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,QALjB,GCAxB,MAAMC,EAAS,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAmGpJ,SAASC,EAAWC,EAAKC,EAAcC,EAAiBC,GAEtD,IAAIC,EAAeD,EAAME,kBAIrBC,GAFeH,EAAMI,cAENJ,EAAMK,mBACrBC,EAAeN,EAAMO,gBAuBrBC,EAlBwBR,EAAMS,2BAkBK,IAAMH,EAAa,IAAML,EAvClE,IACMS,EA4EJ,GAhCKP,IACHA,EAAe,eAmBjBQ,QAAQC,MAEN,GAAGC,EAAO,SAASA,EAAO,WAAWC,EAAK,WAAWD,EAAO,SAASA,EAAO,SAASE,EAAO,SAASF,EAAO,SAC5GL,EACAL,EA/DK,GAJY,IADfO,EAAe,IAAIM,MACIC,aAAaC,SAAS,EAAG,QACjC,GAAGR,EAAKS,eAAeD,SAAS,EAAG,QACnC,GAAGR,EAAKU,eAAeF,SAAS,EAAG,QACnC,GAAGR,EAAKW,oBAAoBH,SAAS,EAAG,OAmErC,uBAApBnB,EAA2C,aAAauB,OAAOC,KAAKzB,GAAc0B,UAAY1B,EAC9FC,GAEFY,QAAQc,IAAI5B,GAEY,uBAApBE,EAEF,IAAK,IAAI2B,KAAO5B,EAGda,QAAQc,IAEN,GAAGX,EAAK,SAASC,EAAO,SAASF,EAAO,QACxCa,EACAJ,OAAOK,UAAUC,SAASC,KAAK/B,EAAa4B,KAE9Cf,QAAQc,IAAI,OAAQ3B,EAAa4B,IAIrCf,QAAQmB,WAKV,SAAShB,EAAKiB,GAAU,MAAO,KAAQpC,EAAO,MAAMoC,QAEpD,SAAShB,EAAOgB,GAAU,MAAO,KAAQpC,EAAO,OAAOoC,QAYvD,SAASlB,EAAOkB,GAAU,MAAO,KAAQpC,EAAO,MAAMoC,QAuDtD,EAAA1C,EAAO2C,KA9PP,SAAcnC,EAAKC,EAAe,YAAamC,GAAQ,GACjDA,GAAQtB,QAAQsB,QACpB,IAAIjC,EAqBN,WACE,IAAIkC,EAAwBC,MAAMC,kBAClCD,MAAMC,kBAAsB,SAAUC,EAAGrC,GAAQ,OAAOA,GACxD,IACIA,GADwB,IAAImC,OACAnC,MAoDhC,OAnDAmC,MAAMC,kBAAsBF,EAO5BlC,EAAMsC,QACNtC,EAAMsC,QACatC,EAAM,GAnCbuC,GAOA,aAAR1C,EAQN,SAAqBA,EAAKC,EAAcE,GACtC,IAAIG,EAAeH,EAAMK,kBACNL,EAAMwC,cACzB5C,EAAW,OAASO,GAA8B,MAAvC,eAA0EL,EAAa0B,OAAQ1B,EAAcwB,OAAOK,UAAUC,SAASC,KAAK/B,GAAeE,GAVpKyC,CAAY5C,EAAKC,EAAcE,GAG/BJ,EAAWC,EAAKC,EAAcwB,OAAOK,UAAUC,SAASC,KAAKhC,GAAMG,I","sources":["webpack://dlog-node/webpack/bootstrap","webpack://dlog-node/webpack/runtime/global","webpack://dlog-node/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","const colors = [1, 4, 7, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107]\n\nfunction dlog(obj, variableName = 'anonymous', trace = false) {\n  if (trace) {console.trace()}\n  let stack = getStack()\n  // color_test(obj);\n  // var o = {}\n  // Error.captureStackTrace(o, dlog)\n  // let stack = o.stack\n  // console.log(stack)\n\n  if (obj === '__func__') {\n    logFunction(obj, variableName, stack)\n  }\n  else {\n    finalPrint(obj, variableName, Object.prototype.toString.call(obj), stack)\n  }\n}\n\nfunction logFunction(obj, variableName, stack) {\n  let functionName = stack.getFunctionName()\n  let func         = stack.getFunction()\n  finalPrint('调用 ' + (functionName ? functionName : '匿名') + ' 方法' + ' | ' + '参数个数: ' + variableName.length, variableName, Object.prototype.toString.call(variableName), stack)\n}\n\nfunction getStack() {\n  var origPrepareStackTrace = Error.prepareStackTrace\n  Error.prepareStackTrace   = function (_, stack) {return stack}\n  var err                   = new Error()\n  var stack                 = err.stack\n  Error.prepareStackTrace   = origPrepareStackTrace\n\n  // var obj = {}\n  // Error.captureStackTrace(obj, getStack)\n  // console.log(obj.stack);\n\n  // Remove superfluous function call on stack\n  stack.shift() // getStack --> Error\n  stack.shift() // getStack --> Error\n  let stackElement = stack[0]\n\n  // console.dir(stackElement.__proto__);\n  //\n  // // console.log(stackElement.constructor());\n  // console.log(stackElement.getColumnNumber()) // 17\n  // console.log(stackElement.getEvalOrigin()) // eval at createFunction (http://localhost:8080/js/vue/vue.js:11649:14)\n  // console.log(stackElement.getFileName()) // undefined\n  // console.log(stackElement.getFunction()) // ƒ () { dlog('__func__', arguments, false); }\n  // console.log(stackElement.getFunctionName()) // before-enter\n  // console.log(stackElement.getLineNumber()) // 4\n  // console.log(stackElement.getMethodName()) // null\n  // console.log(stackElement.getPosition()) // 514\n  // console.log(stackElement.getPromiseIndex()) // null\n  // console.log(stackElement.getScriptNameOrSourceURL()) // undefined\n  // console.log(stackElement.getThis()) // Window {window: Window, self: Window, document: document, name: \"\", location: Location, …}\n  // console.log(stackElement.getTypeName()) // Window\n  // console.log(stackElement.isAsync()) // false\n  // console.log(stackElement.isConstructor()) // false\n  // console.log(stackElement.isEval()) // true\n  // console.log(stackElement.isNative()) // false\n  // console.log(stackElement.isPromiseAll()) // false\n  // console.log(stackElement.isToplevel()) // true\n  // console.log(stackElement.toString()) // before-enter (eval at createFunction (http://localhost:8080/js/vue/vue.js:11649:14), <anonymous>:4:17)\n  ///\n  // 5\n  // client.js?06a0:56 undefined\n  // client.js?06a0:56 pages/article.js\n  // client.js?06a0:56 undefined\n  // client.js?06a0:56 asyncData\n  // client.js?06a0:56 28\n  // client.js?06a0:56 null\n  // client.js?06a0:56 1164\n  // client.js?06a0:56 null\n  // client.js?06a0:56 pages/article.js\n  // client.js?06a0:56 undefined\n  // client.js?06a0:56 null\n  // client.js?06a0:56 false\n  // client.js?06a0:56 false (repeated 4 times)\n  // client.js?06a0:56 true\n  // client.js?06a0:56 asyncData (pages/article.js:28:5)\n\n  return stackElement\n}\n\n// function getStackTrace() {\n//   var obj = {}\n//   Error.captureStackTrace(obj, getStackTrace)\n//   return obj.stack\n// }\n\nfunction now_time() {\n  var date         = new Date()\n  var hours        = `${date.getHours()}`.padStart(2, '0')\n  var minutes      = `${date.getMinutes()}`.padStart(2, '0')\n  var seconds      = `${date.getSeconds()}`.padStart(2, '0')\n  var milliseconds = `${date.getMilliseconds()}`.padStart(3, '0')\n  return `${hours}:${minutes}:${seconds}:${milliseconds}`\n}\n\nfunction finalPrint(obj, variableName, typeStringValue, stack) {\n\n  let columnNumber = stack.getColumnNumber()\n  // let evalOrigin            = stack.getEvalOrigin()\n  let fileName     = stack.getFileName()\n  // let func                  = stack.getFunction()\n  let functionName = stack.getFunctionName()\n  let lineNumber   = stack.getLineNumber()\n  //////////////////////////////////////////////////////\n  // let methodName            = stack.getMethodName()\n  // let position              = stack.getPosition()\n  // let promiseIndex          = stack.getPromiseIndex()\n  let scriptNameOrSourceURL = stack.getScriptNameOrSourceURL()\n  // let this1                 = stack.getThis()\n  // let typeName              = stack.getTypeName()\n  // console.log(columnNumber)\n  // console.log(evalOrigin)\n  // console.log(fileName)\n  // console.log(func)\n  // console.log(functionName)\n  // console.log(lineNumber)\n  // console.log(methodName)\n  // console.log(position)\n  // console.log(promiseIndex)\n  // console.log(scriptNameOrSourceURL)\n  // console.log(this1)\n  // console.log(typeName)\n  // console.log('■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■')\n\n  // let fileInfo = fileName + ':' + lineNumber + ':' + columnNumber\n  let fileInfo = scriptNameOrSourceURL + ':' + lineNumber + ':' + columnNumber\n\n  // if (!fileName) {\n  //   fileInfo = stack.toString()\n  // }\n\n  if (!functionName) {\n    functionName = '<anonymous>'\n  }\n\n  // console.group(\n  //   // `%s %s <%s> :- ${green(' %s ')}${blue(' %s ')}${black(' = ↓')}`,\n  //   `%c%s %c %s() %c <%s> :- %c %s %c %s %c = ↓`,\n  //   'font-weight:normal;font-family: \"JetBrains Mono\"',\n  //   fileInfo,\n  //   'background-color:#FFDFA2;color:#AA7942;font-weight:100;font-family: \"JetBrains Mono\";line-height:18px',\n  //   functionName,\n  //   'font-weight:100',\n  //   now_time(),\n  //   'background-color:#025100;color:#FFF;font-weight:100;line-height:18px;font-size:12px;font-family:\"JetBrains Mono\"',\n  //   variableName,\n  //   'background-color:#078DFF;color:#FFF;font-weight:100;line-height:18px;font-size:12px;font-family:\"JetBrains Mono\"',\n  //   typeStringValue,\n  //   'color:black;font-weight:normal;',\n  // )\n\n  console.group(\n    // `%s %s <%s> :- ${green(' %s ')}${blue(' %s ')}${black(' = ↓')}`,\n    `${normal('%s')} ${normal('%s()')} ${blue('<%s>')} ${normal(':-')} ${normal('%s')} ${purple('%s')} ${normal('= ↓')}`,\n    fileInfo,\n    functionName,\n    now_time(),\n    // variableName,\n    typeStringValue === '[object Arguments]' ? `Arguments(${Object.keys(variableName).length})` : variableName,\n    typeStringValue,\n  )\n  console.log(obj)\n\n  if (typeStringValue === '[object Arguments]') {\n    // console.dir(variableName);\n    for (let key in variableName) {\n      // console.log(blue(key), Object.prototype.toString.call(variableName[key]), '->', variableName[key])\n      // console.dir(variableName[key])\n      console.log(\n        // `%s %s <%s> :- ${green(' %s ')}${blue(' %s ')}${black(' = ↓')}`,\n        `${blue('%s')} ${purple('%s')} ${normal('->')}`,\n        key,\n        Object.prototype.toString.call(variableName[key]),\n      )\n      console.log('===>', variableName[key])\n      // console.dir(variableName[key]);\n    }\n  }\n  console.groupEnd()\n}\n\nfunction choose_color(content, color_index) {return `\\x1b[0;1;7m${content}\\n\\x1b[0m`}\n\nfunction blue(content) {return `\\x1b[${colors[6]}m${content}\\x1b[0m`}\n\nfunction purple(content) {return `\\x1b[${colors[21]}m${content}\\x1b[0m`}\n\nfunction green_with_bordered(content) {return `\\x1b[7;32;48m${content}\\x1b[0m`}\n\nfunction green(content) {return `\\x1b[${colors[4]}m${content}\\x1b[0m`}\n\nfunction red(content) {return `\\x1b[${colors[3]}m${content}\\x1b[0m`}\n\nfunction black(content) {return `\\x1b[${colors[32]}m${content}\\x1b[0m`}\n\nfunction cyan(content) {return `\\x1b[${colors[31]}m${content}\\x1b[0m`}\n\nfunction normal(content) {return `\\x1b[${colors[0]}m${content}\\x1b[0m`}\n\nfunction getAllInformation(obj) {\n  let res = getMethods(obj)\n  console.warn('%o', res)\n  return res\n}\n\nfunction getMethods(obj) {\n  var res = {\n    methods   : [],\n    properties: [],\n    // computedStyle: getComputedStyle(obj, null),\n  }\n  if (obj instanceof Node) {\n    res.cssList       = []\n    let computedStyle = getComputedStyle(obj, null)\n    for (let key in computedStyle) {\n      if (/[0-9]+/.test(key) === false) {\n        // console.log(key, computedStyle[key])\n        res.cssList.push({\n          // [key]: computedStyle[key],\n          key  : key,\n          value: computedStyle[key],\n          type : Object.prototype.toString.call(computedStyle[key]),\n        })\n      }\n    }\n  }\n  for (let key in obj) {\n    if (typeof obj[key] == 'function') {\n      res.methods.push({\n        key           : key,\n        value         : obj[key],\n        type          : Object.prototype.toString.call(obj[key]),\n        parameterCount: obj[key].length,\n      })\n    }\n    else {\n      res.properties.push({\n        key  : key,\n        value: obj[key],\n        type : Object.prototype.toString.call(obj[key]),\n        // type:typeof obj[m]\n      })\n    }\n  }\n\n  res.methods.sort((a, b) => a.key.localeCompare(b.key))\n  res.properties.sort((a, b) => a.key.localeCompare(b.key))\n  if (res.cssList) {res.cssList.sort((a, b) => a.key.localeCompare(b.key))}\n\n  return res\n}\n\nglobal.dlog = dlog\n\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","colors","finalPrint","obj","variableName","typeStringValue","stack","columnNumber","getColumnNumber","functionName","getFileName","getFunctionName","lineNumber","getLineNumber","fileInfo","getScriptNameOrSourceURL","date","console","group","normal","blue","purple","Date","getHours","padStart","getMinutes","getSeconds","getMilliseconds","Object","keys","length","log","key","prototype","toString","call","groupEnd","content","dlog","trace","origPrepareStackTrace","Error","prepareStackTrace","_","shift","getStack","getFunction","logFunction"],"sourceRoot":""}